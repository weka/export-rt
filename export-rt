#!/usr/bin/env python3

# Weka Prometheus client
# Vince Fleming
# vince@weka.io
#

import argparse
# system imports
import logging.handlers
import os
import platform
import sys
import time
import traceback
from multiprocessing import Process

import prometheus_client

import wekalib.signals as signals
from collector import wekaCollector
# local imports
from wekalib.wekacluster import WekaCluster

VERSION = "0.0.1"


def prom_client(prom_port, configfile, cluster_hosts, auth):
    # set the root logger
    logger = logging.getLogger()

    try:
        cluster_obj = WekaCluster(cluster_hosts, auth)
    except Exception as exc:
        track = traceback.format_exc()
        print(track)
        logger.critical(f"unable to create cluster object: {exc}")
        sys.exit(1)

    # create the wekaCollector object
    collector = wekaCollector(configfile, cluster_obj)

    #
    # Start up the server to expose the metrics.
    #
    logger.info(f"starting http server on port {prom_port}")
    prometheus_client.start_http_server(int(prom_port))

    # register our custom collector
    prometheus_client.REGISTRY.register(collector)

    while True:
        time.sleep(30)  # sleep first, just in case we're started at the same time as Loki; give it time


if __name__ == '__main__':
    # handle signals (ie: ^C and such)
    signals.signal_handling()

    parser = argparse.ArgumentParser(description="Prometheus Client for Weka clusters")
    parser.add_argument("-c", "--configfile", dest='configfile', default="./export-rt.yml",
                        help="override ./export-rt.yml as config file")
    parser.add_argument("-p", "--port", dest='port', default="8001", help="TCP port number to listen on")

    parser.add_argument('clusterspec', default="localhost", nargs='*',
                        help="Cluster specifications.  <host>,<host>,...:authfile")
    parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")
    parser.add_argument("--version", dest="version", default=False, action="store_true", help="Display version number")
    args = parser.parse_args()

    if args.version:
        print(f"{sys.argv[0]} version {VERSION}")
        sys.exit(0)

    if args.verbosity == 0:
        loglevel = logging.ERROR
    elif args.verbosity == 1:
        loglevel = logging.WARNING
    elif args.verbosity == 2:
        loglevel = logging.INFO
    elif args.verbosity > 2:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.DEBUG

    # set the root logger
    logger = logging.getLogger()
    FORMAT = "%(process)s:%(filename)s:%(lineno)s:%(funcName)s():%(levelname)s:%(message)s"
    logger.setLevel(loglevel)

    # create handler to log to syslog
    print(f"setting syslog on {platform.platform()}")
    if platform.platform()[:5] == "macOS":
        syslogaddr = "/var/run/syslog"
    else:
        syslogaddr = "/dev/log"
    syslog_handler = logging.handlers.SysLogHandler(syslogaddr)
    syslog_handler.setFormatter(logging.Formatter(FORMAT))

    # create handler to log to stderr
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(FORMAT))

    # add handlers to root logger
    if syslog_handler is not None:
        logger.addHandler(syslog_handler)
    logger.addHandler(console_handler)



    # configure logging in collector module
    logging.getLogger("collector").setLevel(logging.DEBUG)

    # configure logging in wekalib module (default for all)
    logging.getLogger("wekalib").setLevel(logging.ERROR)

    # configure logging in wekaapi module
    logging.getLogger("wekalib.wekaapi").setLevel(logging.INFO)

    # configure logging in sthreads module
    logging.getLogger("wekalib.sthreads").setLevel(logging.ERROR)

    # configure logging in wekacluster module
    logging.getLogger("wekalib.wekacluster").setLevel(logging.INFO)

    # configure logging in lokilogs module
    logging.getLogger("lokilogs").setLevel(logging.INFO)

    # configure logging in circular module
    # logging.getLogger("wekalib.circular").setLevel(logging.INFO)

    # configure logging in urllib3 module
    logging.getLogger("urllib3").setLevel(logging.ERROR)

    # schedule up a process for each cluster, put them on consecutive ports starting at 8001 (or specified port)
    subprocesses = {}
    port = int(args.port)

    for spec in args.clusterspec:
        clusterspeclist = spec.split(":")
        # cluster_hosts = clusterspeclist[0].split(',')
        if len(clusterspeclist) > 1:
            cluster_auth = clusterspeclist[1]
        else:
            cluster_auth = None
        p = Process(target=prom_client,
                    args=(port, args.configfile, clusterspeclist[0], cluster_auth))
        subprocesses[clusterspeclist[0]] = p  # keep processes by clusterspec so easy to tell them apart
        port += 1

    # kick them off
    for clusterspec, proc in subprocesses.items():
        logger.info(f"starting processing of cluster {clusterspec}")
        proc.start()

    while True:
        time.sleep(10)
        # monitor subprocesses
        for clusterspec, proc in subprocesses.items():
            if not proc.is_alive():
                logger.critical(f"Child process for cluster {clusterspec} died.")
                proc.join()
                # do we try to restart it?
